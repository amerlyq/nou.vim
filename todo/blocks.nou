
  2019-12-30 [X] FIXME: if line ends in any "[,-\\]" -- wrap formatting (only "\" for now)

  [_] ENH: declare codeblocks and quotes like in reST / Yaml
    + any part of extracted and deindented outline must be valid outline
    + easy filtering of blocks w/o searching for closing tag on lines below
    + completely different color for whole block to standout from usual outline colors
      ALT: use different hue of same color of outline to distinguish quotes on different nesting
        BUT: not so useful for code -- it better be left of same color on all levels
        MAYBE:ALT: provide special block type to keep outline hue (like trailing "\\")
    ~ maybe reuse same prefixes as reST:  "::" and ".. code-block:: bash"
    IDEA: allow nested outline :: nou inside nou (but with reset indent)
      => then I can place highlighted gdb/assembler blocks inside narrative of coredump investigation

%% Blocks
  [_] FIXME inherit default color when ``` has zero-indent
  [_] NOTE `{3} actually BAD -- I can't use it with 'ts=2' to align
    * MAYBE:BETTER: single _`_ to align nicely |` text...|
  [_] Create block for simple text and commented text (in addition to ``)
    ~ Placing marker at *^__* before text -- BUT then I can't use 'g<'
    Like ``_ to insert text, ``# -- comment and ``$ -- bash
    ALT: Using *__* or '```' in '# __' or '$ __' to forcibly extend any current syntax till multiline block
      * Try using 'extend transparent skipwhite skipnl skipempty'
    TODO: if there are /`{3}\w/ (like vim flavour) -- do contains=NONE (if no embedded syntax)
  [_] Block -- used even without indent (like ``\`) for long text massives
    (option) Auto-extend block for decisions: until new leading character, lower indent or until closing-repeated decision-marker
  [_] TRY: use 'standout' background for block of monotonous text to distinguish
  [_] BUG:FIXME: `syntax sync ...` not working for '```' regions
    <= open this 'TODO.nou' and jump 'G' to the end of file

% multiline
NEED special way to continue long entries on next line
  -/ C: trailing '\' on current line
  -/ vimscript: leading '\' on next line
  -/ yaml: indented block after special ending ': |'
  ?/ custom:
    another indent but same color -- distinguishes this entry
    no prefixed symbols -- simplify 'y', 'gq', etc
    indent in one tab -- simplify 'g>'
