%%%%% Key-value %%%%%  # *nou-keyval*
# vim:ft=nou

%% Simple values

  key=value
  ke_y=val_ue
  ke-y=val-ue
  ke.y=val.ue
  _key=val?ue
  key:=val*ue

%% Object values

o.
o.ke.
o.ke.y=val.ue
 o.ke.y=val.ue
  $o.ke.y=$val.ue

o.ke.fn(a)
 o.$ke.fn(a=$b)
  o.ke.fn(a, b)
   o.ke.fn(a).fn(b)

%% Nested values

  key=key:value
  key=key=value
  key=(key=value)
  key=func(args)
  key=( func(args) )

%% List values

  key=val,ue
  key=(val ue)
  key={val,ue}
  k1=<v1|v2|v3>

%% Enumerations

  k1=v1,k2=v2,k3=v3
  k1=v1/k2=v2/k3=v3
  k1=v1 / k2=v2 / k3=v3
  k1=v1, k2=v2, k3=v3
  (k1=v1 k2=v2 k3=v3)
  {k1=v1, k2=v2, k3=v3}
  <k1=v1|k2=v2|k3=v3>
  <k1=v1 | k2=v2 | k3=v3>
  |k1=v1|k2=v2|k3=v3|
  |k1=v1 | k2=v2 | k3=v3|

%% Artifacts

  key="$var"
  key=" $var "

%% Non-path

  key=10MiB/s           # units of measure
  key='10 MiB/s'        # units of measure
  key=' /path/to'       # leader
  key=" /path/to"       # leader
  key='a/path/to'       # alternative
  key="b/path/to"       # alternative
  key='a /path/to'      # list
  key="b /path/to"      # list

%% Quoted paths

  key=/path/to          # raw (unquoted)
  key='/path/to'        # single-quoted
  key="/path/to"        # double-quoted
  key=(/path/to)        # parenteses-quoted
  key=[/path/to]        # brackets-quoted
  key={/path/to}        # braces-quoted
  key=</path/to>        # triangle-quoted

%% Var-prefix paths

  key='$(var)/path/to'  # sq-var prefixed
  key="$(var)/path/to"  # dq-var prefixed

%% Region paths

  key=⋮relpath⋮         # raw region path
  key='⋮relpath⋮'       # sq-region path
  key="⋮relpath⋮"       # dq-region path
