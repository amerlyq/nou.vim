%%%%% Paths %%%%%  # *nou-all-path*
# vim:ft=nou

%% Not path

  /         # single slash
  //        # double slash
  /////     # slash delim
  js://www  # link
  cc:\\rnd  # random
  ///root/  # repeated prf
  /home///  # repeated sfx
  /\        # sfx \s
  \ /       # prf \s
  s :123    # num
  s :12:33  # num:col
  s x/y/z   # variants (inlined)
  x / y     # variants (2)
  x / y /   # variants (3)

% Regex
  /./
  /r\ \/x/  # regex
  /s \d\//  # escaping
  /s \///   # not regex

*************************

%% Root

  /root
  /ro\ t
  /root/path
  /home/user/
  c:\\Program\ Files\\Prg
  c:\\Program\ Files\\      # BUG: trailing space instead of delimiter
  D:\some\path
  x:\
  z:\\

%% Context-dependent location

  ALT:(marker): // ⁖/ $/ $$/ #/ ##/ ⋮/

e.g.USAGE: function calltree for linux kernel

  • DFL=getcwd(initial) -- simply launch vim from inside correct directory
  • dynamic getcwd() of current buffer -- NEED: reset :let g:nou.loci=''
  • from user-specified variable :let b:nou.loci="/path/to/dir"
  • DEV: context-dir ⋮//=/path/to/dir⋮ specified inside same file (search above path)

  //s/d/
  //some/dir
  //some/dir/
  //some/file.ext
  //some/file_name

%% Fixed location prefix

  ~/
  ~/dir
  ~/in/home
  ./file                # path relative to current file (./nou-path.txt)
  ../relat/path         # same as above == ./../relat/path

  @/airy/README.md      # repo (view) inside myrepos :: ~/aura OR /annex
  :/doc/nou.txt         # subpath (feature) inside current repo
  %/../Makefile         # filepath relatively to cwd ($PWD)
  …/errno.h             # search in all ':h path' (.,/usr/include) like usual 'gf' do
  &/ranger/doc/         # open reference file inside ./&/ directory in cwd or parents hierarchy
                        #   = add "&/" to pj .gitignore and keep all temporary third-party materials there
  ^/amv/*               # path somewhere on remote (unspecified), locally unavailable
                        #   THINK:BET? always use parametrized path $nas/amv/* to encode <remote> placeholder
  ♆/dunst               # *airy* feature (=@/airy/dunst)
  ☆/dunst               # generic feature (=/x/*)
  ★/dunst               # favorite feature (=/x/_(now|fav)/*)
  # FIXME:BET: use '@' for dev-repos and directly use /x/* for *aura*
  ☤/dunst               # dev repo/project anywhere (=@/**/.git)

%% Patterns

  //<pkg>/*.mk
  //$pkg/<src>
  /ho<me>/$user
  //some/dir$v/f
  $pkg/<src>
  ${pkg}/<src>
  $(pkg)/<src>
 ⋮$(shell $(pkg))/<src>

%% Line numbers

  //file:117
  //path/lnum:32
  /lnum/lcol:32:44
  ~/d/n:13:5end         # inlined

%% Trailing operators %% / special-terms / topics

DEV: interpret tail by <gf> to jump directly inside file

  /path:11:22           # STD lineno  = s:pe('%(:\d+)*⋮?')
  /path:/search         # (.vim|ctag)-style search for text
  /path:/sea/rch        # XXX: is such highlight good ?
  /path:/sea\/rch       # escaped regex NICE: can be directly copied to vim/sed
  /path:?search         # prevent conflict with '/' regex
  /path::term:          # (.rst|.org)-style
  /path:*term*          # my bold object terms
  /path:%sect           # beginning of named section
  /path:^text           # beginning of any outline line
  /path:=term           # ??? SEE: operators from ctags(1) db format and vim help

%% Escaped with spaces

  /root/spa\ \ ce
  ./relat/space\        # sfx \s
  //\ some/space/       # prf \s
  ./spa\ ce:89

%% Region with spaces %%  (digraph :3)

 ⋮/root/spa ce          # path till end of line
 ⋮/root/spa ce⋮         # contained path
 ⋮aaa⋮                  # path without slash
 ⋮relative/path⋮        # PERF: direct parsing of such relpaths is very inefficient
 ⋮aaa:/with space⋮      # tail search term with spaces
 ⋮aaa⋮ bbb ⋮ccc⋮        # several paths separated by spaces
  (⋮aaa⋮,⋮ccc⋮)         # group of comma-separated paths
  embe⋮sp ce⋮dded       # embedded into the middle of the word
  /root/spa ce⋮         # FAIL:PERF: seek by only trailing marker

%% In lists

  ~/, //r/p, ./h, /v/p  # use ", " as path separator
  /r/p,./h/p,//v/p      # treat "," as part of path
  ~/,/end/comma,        # ignore trailing "," (belongs to sentence)
  /root /home /var      # allow space-separated paths
  ./relat/path /s/some

%% Brackets
  (./dir  ./#)  (~/.)
  [/r/dir ~/_]  [/r/d]
  {//s/dir //dir} {//s}
  <//file:117>          # BAD: ending conflicts with /home/<path>
  "/some"
