#!/usr/bin/env python3

import sys
import re
from parglare import Parser, Grammar

# text: OEB section+[EB] OEB | EB | EMPTY;
# @collect
# blocks: blocks block | block;
# section: header | lines {9};
# @collect_sep
# lines: lines NL line | line;
# OEB: EB | EMPTY;
# // para: line+ NL line | line;
# header: head_mark inline;
# head_mark: /^%{1,5}\s/;
# inline: /[^\n]+$/;

# sec para (sec|blank|EOF)
# blank para (sec|blank|EOF)

# text: block*[NL];
# block: para | EB;
# para: line+[NL] {9};
# EB: /\n{2,}/;
# NLO: NL | EMPTY;

# https://stackoverflow.com/questions/20722864/how-to-solve-this-s-r-conflict
grammar = r'''
S: text EOF;
text: NL* block+[BR] NL* | NL*;
block: inline n_line*;
// block: inline+;

// block: /[\s\S]+/;
// blocks: blocks NL block | block;
// block: lines {9};
// lines: lines NL inline | inline;

n_line: NL inline;
inline: /.+/;
ANY: /[\s\S]/;

BR: /\n{2,}/;
NLS: NL+;
NL: "\n";
'''

# text: NL* inline+[NL] NL* | NL*;
# NOTE: parse everything
grammar = r'''
S: text EOF;
text: NL* | NL* block;
block: n_line+ | EMPTY;
nl_block: NL+ NL;
n_line: line NL+ | line;
line: /.+/;
NL: "\n";
'''

# TRY: parse empty lines in-between
grammar = r'''
S: text EOF;
text: NL* | NL* block;
block: n_line+ NL+ | EMPTY;
n_line: line NL | line;
line: /.+/;
NL: "\n";
'''

# grammar = r'''
# S: file EOF;
# file: block+;
# block: line_nonl line_nl* NL?;
# line_nl: NL line_nonl;
# line_nonl: /.+/;
# NL: "\n";
# '''

texts = [
    '',
    '\n',
    '\n\n',
    '\n\n\n',

    'myline',
    'myline\n',
    'myline\n\n',
    'myline\n\n\n',
    '\nmyline',
    '\n\nmyline',
    '\n\n\nmyline',
    '\nmyline\n',
    '\nmyline\n\n',
    '\n\nmyline\n',
    '\n\nmyline\n\n',

    'myword1 myword2',
    'myword1 myword2\n',

    'myline1\nmyline2',
    'myline1\n\nmyline2',
    'myline1\n\n\nmyline2',
    'myline1\n\nmyline2\n',
]

texts.append('''\
some
%% title

para next word
more lines


% t''')


def main(argv):
    g = Grammar.from_string(grammar, re_flags=re.MULTILINE)
    # g = Grammar.from_string(grammar, re_flags=re.MULTILINE, parse_debug=True)
    if '-d' in argv:
        parser = Parser(g, ws=False, debug=True, debug_colors=True)
    else:
        parser = Parser(g, ws=False)
        # parser = Parser(g, build_tree=True, ws='', debug_layout=True)
    try:
        for t in texts:
            print(parser.parse(t), ' <- ', repr(t))
            # print(repr(t), ' -> ', parser.parse(t).tree_str(), '\n')
    except Exception:
        print('ERR:', ' <- ', repr(t), '\n')
        raise


if '__main__' == __name__:
    main(sys.argv)
    # g = Grammar.from_string('S: T EOF; T: NL* L+[NL] NL* | NL*; L: /.+/; NL: "\n";', re_flags=re.MULTILINE)
    # print(Parser(g, ws=False).parse('\nL1\nL2\n\n'))
