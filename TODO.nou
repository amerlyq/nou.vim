%%%%% Notes + outline unified

TODO
  [_] MAYBE: apply decisions markers on rest-of-any-line instead of prefix-before-task-only
  [_] TODO: higlight vars :: $PWD and ${PWD} and %{PWD}
  [_] BET:CHG: path prefixes
    | :/ -> ./ | then vim auto-completion will work by itself, if current file is opened from its own dir
    | ./ -> %/ | so % becomes the same as $PWD
    | @/ -> git| search for any git/hg/VCS repo matching @/nm/ from root of /x/* onwards
  [_] THINK:CHG: search ‚Ä¶/errno.h inside current or any parents directory instead of 'path' variable
  [_] MAYBE:CHG: "2020-01-14 [10%] ..." => "2020-01-14 10% ..." OR "2020-01-14 %10 ..."
  [_] CHECK: .rst files "rstEmphasis" somehow keeps the same color between asterisks :: *aaa*
  [_] TRY: prepend some symbol to decision/enumeration syntax to distinguish them in parser
    decision: /[`¬∑‚ãÆ]/ -- maybe mark them 'black' like I did with quotes to visually hide
      `+ proc       | positive argument
      `- con        | negative argument
      `~ ambiguity  | dissatisfaction
      `? doubt      | think over
      `! requirement| constraint / attention
      OR:
      ¬∑+ proc       | positive argument
      ¬∑- con        | negative argument
      ¬∑~ ambiguity  | dissatisfaction
      ¬∑? doubt      | think over
      ¬∑! requirement| constraint / attention
      OR:
      ‚ãÆ+ proc       | positive argument
      ‚ãÆ- con        | negative argument
      ‚ãÆ~ ambiguity  | dissatisfaction
      ‚ãÆ? doubt      | think over
      ‚ãÆ! requirement| constraint / attention
    enumeration: /[*‚àô‚àò‚Ä¢]/
      * < reason     | prerequisite
      * : info       | topic clarification
      * > conclusion | decision
      * = result     | consequence
      * ::: summary  | grand final
      OR:
      *< reason     | prerequisite
      *: info       | topic clarification
      *> conclusion | decision
      *= result     | consequence
      *::: summary  | grand final
      OR:MAYBE: use :iabbrev to auto-insert bullet/ligature
      ‚Ä¢ < reason     | prerequisite
      ‚Ä¢ : info       | topic clarification
      ‚Ä¢ > conclusion | decision
      ‚Ä¢ = result     | consequence
      ‚Ä¢ ::: summary  | grand final
  [_] highlight unicode graphics e.g. "‚Üí" by distinct color to standout inside plain text
  2019-12-30 [X] FIXME: if line ends in any "[,-\\]" -- wrap formatting (only "\" for now)
  [_] THINK: –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—è –æ—Ç –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    <= –∏—Å–ø–æ–ª—å–∑—É—é —á–∞—Å—Ç–æ
    => –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–¥–∫–æ
    -> –≤–æ–æ–±—â–µ –Ω–∏–∫–æ–≥–¥–∞  # –ø–æ—Ö–æ–∂–µ —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç –µ—â—ë –∏ "–≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" —Å—Ç—Ä–µ–ª–æ—á–∫–∏ -- –¥–ª–∏–Ω–Ω–∞—è –±–æ–ª–µ–µ "–ø—Ä–∏—è—Ç–Ω–∞" –∏ "–ø–æ–Ω—è—Ç–Ω–∞" –º—ã—Å–ª–µ–Ω–Ω–æ
    --> –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞
  [_] DEV:IDEA: formalize structured syntax inline artifacts (similar to my hand-written pictogram for physics)
    ** intent :: math-like grammar for plain language logics
      e.g. I already use "--", "::" and "=>" anyway -- can formalize and extend it already by "<<", etc.
    ** logics
      e.g. picotui BET(than urwid)
    ** ‚¶óflavor‚¶ò :: dispensable emotional coloring to enrich dry decision terms without overencumbering their underlying logic
      e.g. doubts, anxiety, beautifications, etc.
        something akin to what I use (?...?) for :::  user need this (?wrong suggestion?)
      == intended to express somewhat subtle atmosphere of emoji without intrusive standalone emoji
    ** brightness :: default term accents are too bright => keep brightness for "~~...~~" but reduce gamma for "~...~" accents
      ~project~
      ~~project~~
  [_] generate all syntax demo file based on all available options in :/autoload/nou/opts.vim
  [_] DEV:TRY: port parts of syntax to .rst
    NOTE: it seems like my "outline blocks" are no more than special syntax blocks for .rst
      * I always indent them. Always.
      * I have different syntaxes for outlines
        - decision making
        - GTD tasks nesting and priority
        - weblinks history depth
        - software tools compact overview
        - ...
  [_] highlight today in bright yellowish white :: ctermfg=230 guifg=#ffffdf
  [_] highlight all FUTURE dates differently :: ctermfg=105 guifg=#8787ff
  [_] overload <gf/gF/gC-f> to jump to @/demo/ open @/airy/Makefile or repo-related :/README.md
  [_] Date format for full timepoints and intervals
    REF: https://en.wikipedia.org/wiki/ISO_8601
    REF: new extended drafts for times and intervals
      ISO/DIS 8601-1:2016 and ISO/DIS 8601-2:2016
      https://github.com/plk/biblatex/issues/656
      https://www.iso.org/iso-8601-date-and-time-format.html
    TRY: my timepoints
      20190729_190330
      20190729_190330Fri
      20190729T190330
      20190729T190330+0000Fri
      2019-07-29_19:03:30
      2019-07-29_19:03:30_Fri
      2019-07-29T19:03:30
      2019-07-29T19:03:30+00:00
    weeks
      2019-W31-1
    combinate date-time with timezones
      "2007-04-05T14:30Z"
      "2007-04-05T12:30-02:00"
    durations
      "P3Y6M4DT12H30M5S" represents a duration of "three years, six months, four days, twelve hours, thirty minutes, and five seconds".
      "P1M" is a one-month duration and "PT1M" is a one-minute duration
      "P0003-06-04T12:30:05" -- BUT: individual date and time values cannot exceed their moduli
    intervals
      Start and end, such as "2007-03-01T13:00:00Z/2008-05-11T15:30:00Z"
      Start and duration, such as "2007-03-01T13:00:00Z/P1Y2M10DT2H30M"
      Duration and end, such as "P1Y2M10DT2H30M/2008-05-11T15:30:00Z"
    repeating
      "R5/2008-03-01T13:00:00Z/P1Y2M10DT2H30M" -- starting at / with each duration
    [_] CMP: with emacs orgmode
  [_] MAYBE: use unicode symbols for checkbox BUT: "wide" are nice but cropped
    VIZ: ‚òê‚ùè | üóπ ‚òë‚úì‚úî‚úÖüó∏ | ‚ÆΩ‚òí‚úó‚úòêÑÇ‚ùåüó¥üó∂üóµ üó∑
    BAD: one-symbol checkbox is looking too crumpled
    SVC: http://www.amp-what.com/unicode/search/box
  [_] TODO: switch hi! places for todo [_] and decision "!!" markers
  [_] script for pandoc to convert *.nou into *.md
  [_] Test and compare with vimoutliner
    [_] https://github.com/xolox/vim-notes/blob/master/autoload/xolox/notes.vim
    [_] https://github.com/vimwiki/vimwiki
    [_] http://tiddlywiki.com  -- one-page wiki
      [_] Extract all scripts (~8) in github for converting
    [_] https://github.com/jceb/vim-orgmode
    [_] https://github.com/Rykka/riv.vim
    [_] https://github.com/vim-voom/VOoM
  [_] THINK extend Markdown by indented outline syntax and new marks instead of own?
    > Markdown flavours aren't suited for my writings
  [_] THINK:TRY: embed 'nou' into Comment group of any other syntax files
    ~ use `au!` on `:setf` to infect syntax
  [_] TODO switchable colorschemes 'on the fly'
   different info requires different indent nesting, but similar coloring!
  [_] THINK Tagbar -- always open, shows outer outline (useful for music.otl)
  [_] add link to ./doc dirs from my other repos -- as examples of extensive usage of *.nou

  [_] BAD: long lines dont match syntax at all FIXME: always match at beginning
    # set synmaxcol=8000   " clear syntax state over that width, =8000 pretty safe
    ALT: replace 'region' match by 'regex' match
  [_] FIX 'Task' regex in mappings to match by /\k/ -- which supports cyrillic
    http://unix.stackexchange.com/questions/60481/match-word-containing-characters-beyond-a-za-z
    http://stackoverflow.com/questions/19385458/vim-regex-matches-unicode-characters-are-as-non-word
  [_] IDEA:THINK: fast short notes-taking and storing in one of predetermined dirs
    https://github.com/Alok/notational-fzf-vim
  [_] CMP: with orgmode demo
    + https://vincent.bernat.im/en/blog/2017-netops-org-mode


NEED: smart xref hints (cross-references)
  WHY: many duplicate ideas through many files, despite slightly changed
    * insert new thoughts near previous related ones
    * find previous places with related thoughts
  BAD: you may loose passion and forget what exactly you wanted to write
    * to place new ideas in correct position between old ones -- you must read old ones
    ! reading breaks immersion in fleeting thoughts and impressions
    BUT: still very useful for refactoring notes
  IDEA: place cursor on any sentence / select words and press "Find" keybinding
    * NEED: smth aka google search inside current .git or user list of dirs with notes
    * show in top/right corner "Preview" window with excerpts and highlighted words
    * show quickfix/jump window at bottom/right to open excerpts in buffer and edit
  ALT: reduce cross-map only to tags, placed around header only #miur #miur#graph #overlay#node
    MAYBE:ALG: use some kind of "ctags"
    BAD: hard to write exhaustive metainfo, encumbers view too much


%%%% Syntax %%%% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%%% Outline
  [_] Allow mixed block/flow syntax as in yaml -- for one-word branches in graphviz
  [_] Use space instead tab -- generate regexes based on values in ts=2:sw=2:sts=2
    ALT: query color from cached map with spaces as keys =~ '\s{i,i+2}'
  [_] Interlace/variate rows colors on the same level (like html/css tables)
    := Darker/Lighter then current header -- for long lists of multiline items
    := ALT: the same spectrum for all sub-topics in any level -- for decision-making
  [_] THINK:TRY: contrast palette
    [_] FIND:XXX: how to choose harmonic color palette
      like music notes -- must be non-linear
    [_] outline -- dif than 'solarized' but similar colors
      [_] TRY: linear HSL/HCL palette
        https://en.wikipedia.org/wiki/List_of_color_spaces_and_their_uses
        TRY: limited to sub-range 'pastel..purple-dark'
          http://hclwizard.org/why-hcl/
          http://hslpicker.com/#c38d3c
      = must be contrasted in gui but the same in term16
      ? how about cterm256 -- search for other ?
    [_] USE 'solarized' only for numbers and other objects of std syntax

%%% Headers
  [_] BAD: always concealing -- can't relaibly detemine header nesting level
    ? maybe *.md isn't that bad using '#' explicitly
  [_] IDEA: beside headers (OR instead of them) use multicolor labels
    * Like current headers with concealed markers
    = Useful to label outlines/paragraphs
      < as clean hierarchy not always possible
    = Good in combining with *delimiters* like in this TODO.nou
  [_] Headers: bold. How to make them more distinguishing?
  [_] FIXME:DEV: don't treat headers as artifacts inside outline
    << E.G. #outline contains=..,@nouHeaderQ,..
    ~ create it's own mechanics for indented not-outline objects
      BUT if for key-value object I need outline anyway
    = BETTER: outline artifacts which work only at the beginning of outline
  [_] Allow numbered syntax and single end-marker: `%4 ... %`
  [_] Allow combining headers on one line to form flat path
    '%%' H2 '%%%' H3 '%%%%' H4 '%' H1 '%%'
  [_] TRY:USE: allow any text after closing tag of header
    = So you can embed headers into text like paragraph 'literas'
  [_] Conceal header markers on-demand if using 'two-side' definition
    * Or some marker extension like %%%<
    * Or when using/not spaces before text
    ALT: invert order of %{N} -> level{N} to nornal one
      + header indent will be more logical (more indent --> deeper)
      + readable level -- by inverted bkgr text edge indent
      + easy to add more nesting at detailed levels
        = no need to predict main header level beforehand
        = no need to move all headers for more deep nesting
        !!! CHECK:THINK: for which usecase current inverted scheme is the most useful
  [_] USE: double '%%' for one level
    + more standout levels
    + aligned to outlines (remember ugly wide-char text with even indent)
  [_] (option) propagate hi! on '%%' sign (and make its fg=bg to hide)
    ALT:TRY: make '%%' fg equal to bg of header itself (%% bg remains empty)
  THINK: using *tweaked* headers instead of outline (like in LaTeX)
    : seems like "flattened" outline w/o indent
    * when there are many lines of info for each entry
      # text paragraphs, decison block, etc
    <- using /^%\d+/ -- %4 as 4th level outline
    ? (option) combine outline indent with flat level
      => %4 with 2nd indent => outline of 6th color

%%% Decision
  [_] NEED: everywhere-notch (evernotch.vim) for "investigation" process
    * some links, comments, code excerpt, which I gather from www, when analyzing the problem
    E.G. :STORY: :LIST: -DUMP- :FLOW: :BOOK: +JOURNAL+ :WORK:
    ALSO:NEED: workaround beside :FIXED: -- ?WKRND?
  ~ higlight in pre-defined color only marker (start/end match)
    .. and keep
  [_] FIXME: don't like colors for '>' '<' ':' -- don't feels right
  [_] NEED marker for 'suggestion' -- "possible" variant to choose between
    = Each variant can be discussed by arguments in its own indent
    ? TEMP: using '<-' ?
  [_] TRY:THINK: asymmetrical region
    * higlight ending '?' or '!' even if it wasn't prepended by space (most as I type)
  [_] NEED syntax for 'examples' or 'generalization'
    = Likewise to specify examples of regex with clarification
    = Or specifying regex as abstraction of actual matter
    <- using  [-example-] -[general]-
  ADD: embedded decisions (? ... ?) (?_ ... ?)
    TRY: block ends on symmetrical '?)' or on first ')' if symmetrical not found
      ? rather inefficient ?
    ALSO: comment-like embedding (two spaces around): 'before  ? *decision* ?  after'
    ALSO: embedded comments (#...#) -- to comment only last word instead of left part of whole line
  [_] Amount of '[>:~]{n}' in line prefix -- changes 256 color to more dim/bright
    : In 8 color term all them will have one color
    :* Allows to accentuate intent/attention -- like in lists/music.otl
  [_] BAD colors -- markers blend into outline color on same level
    @ THINK: using for decision only plain text color despite indent
      (option) to enable it -- if no better solution found
    ? BUT how to distinguish/stand-out decision blocks on different outline levels ?

%%% Priority
  MAYBE override highlighting of whole line?
    BUT how about mixed body coloring of priority/outline/decision?
    THINK don't mix them at all -- all are placed in different sections of notes
      # Each section -- indented block at 1st level
      ? THINK what if to allow nested blocks indented relative to current level?
        = Too complex. Moreover -- what if I need only one decision-like line inside outline?
  THINK how to combine with decision-making markers to order statements
    Maybe simply add number before/after decision markers?
    # USE:(formats)  *1 8* 4% %3 #2 ~2 !3
    Repeating marker -- several highest priorities (accentuation)
    # USE:(like) * ** ***  OR ! !! !!!
    TRY: inherit decision color (simply by adding '\d=' in its pattern) or contain its own
  [_] USE: #tag beside priority !2 to mark and filter "todo" lines based on topic
    ~ !1 #tag #tag [_]
    ~ !2#tag#tag [_]
    ~ !3 [_] #tag #tag
    ~ !4 [_]#tag#tag

%%% Accents
  [_] CHG: white with black bounds '-n' to monolitic gray-blue (average color between  # comment #  and "string")
  [_] FIX special cases treated as accents
    `path/*.yml` for `cfg/*.ee`
    BUG: **...** treated as block, even when each marker is in its own block
  [_] Highlight in different colors text in ` .. `, ' .. ', "..", $..# etc, use conceal
    Make $..# to have another color of left/right separator
    :* quotes must be surrounded by \s or ^$ -- to not escape them inside blocks
    := it will allow distinguish hotkeys, shell commands, code, etc
    :SEE markdown syntax
  [_] Add surround operators for accent -- like I have done for brackets
    ~ Starting combo by <LocalLeader>
  [_] Make ".." transparent syntax group
    -> allows to specify different allowed inner groups
        EXG: disable hi! for '|' inside quoted text
  [_] Colorized accents:
    red: r'..'
    green: g*..*
    emphasize: #'..' -- contrasted to current outline color
  [_] Invert standout accent
    exchange bkgr/frgr colors %text% to always standout from text/outline
  [_] Allow sfx after accent: like *mod*s
    MAYBE use concealed additional delimiters *mod**s | *mod*\s | *mod*'s
  [_] Local colorscheme
    List words/regex and colors to highlight in current file/directory
      = Like arch keywords in 'miur'
    E.G. embedded: modeline/header/footer or separate file in dir

% Unconcealed
  [_] strings in double quotes '\v([''"])(.{-})\1'
  [_] keys in <..>

%%% Artifacts

  [_] THINK use `$var` as native syntax
    MAYBE with meaningful scripts to substitute their values?
    ? Provide somethins like `yaml` combo of * and & ?

%% Markers
  [_] Use cycleable '*/[_]/\d./' list markers (cycle for all list -- not for item)
  [_] Special MARKERS, @tags, #hashlinks to mark type of each statement
    : 'option' , 'syntax_only' , 'adds_user_commands'

%% Embed syntax
SEE
  multi syntax regions for this -- or include all syntax into region
  ft=cucumber bundle/sideways.vim/examples/example.feature -- maybe as prototype?
  embedded syntax regions highlighting
    : https://github.com/xolox/vim-notes
    : https://github.com/Shougo/context_filetype.vim

  [_] After '$' -- use complete bash syntax until end of line
    [_] BUG on 0-indent syntax wraps even without trailing '\'
  [_] THINK: my own simplified syntax for oneline 'sh' by '$' instead of default?
  [_] Set default embedded ft (used in bare `...`) through modeline
    = so I could simplify bash/haskell snippets in otl
  [_] TODO: execute command and insert output directly below (like Mathematica)
    E.G. :r!lspci -vt
  [_] <,.y> -- yank inside current bash-line textobj /$\s/,/\s*\s\s#\s/ E.G. $ amixer scontrols  #
  [_] CHG: identical ``` + ``` -> symmetrical {{{ + }}} | <@ + @>
    => then syntax won't break when scrolling page from bottom up
  [_] NEED: special block for commands outputs (e.g. shell) directly below
    * distinct from outline and comments around them
    * hi! :: simplified / absent / highspeed
    * can contain user comments inside
    * different types -- grep/find/special
    ~? special marker for "output" data from commands
    *? gray color in-between of plain text and comments
    *? applying syntax highlight (as hex/number/etc) must be still possible
    MAYBE: use xml-esque markers for possible blocks
      e.g.
        <grep> ... </grep>
        [grep[ ... ]grep]
      => maybe only Lisp syntax hi is able to execute code immediately on syntax parsing
      => in vim you can pre-generate special hi! depending on pre-parsing of opened file content
        BUT: newly added blocks won't be re-generated -- need hook on ":w" to accomplish syntax refresh
      * must be nestable -- to add some comments hi! inside of hex hi! inside of logs dump hi!


%% Path / Url
  [_] THINK: hi! separate extensions: .xml or *.nou
    BUT: beware -- treats hidden files like .xinitrc as extensions
  [_] BUG: manual paths -- 'gf' treats //some/file as starting from '/'
    ? is there need to fix? FIND: possible cases where need different behaviour
  [_] BUG: captures trailing characters: (//dir) //dir.
    > braces can be fixed by using 'syn region' for them (bounds becomes excluded)
      < I need such objects anyway -- for 'variants' or 'clarifications'
        to strip "|" from their 'contains='
    > problem of trailing dot is fixable by using '//' closing path tag
      ! BUT then 'gf' will be impossible on files, them being treated as dirs
  [_] TRY: add path/url obj to embedded syntax to highlight usage in shell
  [_] TRY: make all cmds green (or use zsh-cmdline hi if possible)
  Categorized colors for 'urls' by provider
    2016-11-01 [X] '.pdf|.md|.doc|...' (dark-blue)
    [_] 'google|yandex|...' (light-blue)
    [_] 'wiki|arch|stack(overflow|exchange)|quora|habrahabr...' (light-green)
  [_] TODO: when path has grep format -- highlight differently
    /path/to/file:17853:matching text in that line
    MAYBE: using hi! blocks with {{{ ... }}} is more simple/portable/flexible solution
    HACK: this case allows to mix grep results with paths in plain texts
    BUT:BAD low performance of syntax hi!

%% Key-value
  < USE instead of mixed/unfolded tables
  * treat keys similar to unordered markers
  ~ embedded yaml
  ? own syntax (key-value dif colors, highlight ops like 'A -> B', etc)
  MAYBE:(like accent) highlight everywhere OR at beginning of line?
  IDEA: different colors depending on position beg/mid (if \w+ exists before key)
  DEV
    key: value
    key=value
  E.G.(hi!): id=val -- "id" is bold dark blue, "=" nobold dark blue, "val" is common solarized text

%% Operators
  [_] Arrows: hi! _in-text_ constructions like *=>*
  [_] hi! ops rarely-used in plain text: '+', '&', etc
    -- to use it more often myself for pseudo-syntax
  [_] hi! any numbers: dec/hex/float/science -- dif color to outline
  [_] hi! separate char-seq /<\W+>/ -- dif color to numbers

%% Numbers
  2017-06-22 [X] General standalone numbers -- normal light blue
  [_] Numbers used as priority or order in lists -- bold darker blue
  [_] Hex/octal numbers -- class-related coloring for ascii, non-printable, etc
    E.G. /0x\x+/ /\\x\x+/ /\\\d+/
    ALSO: comment-like hi! for suffix number specifier /\x+[hdbo]/
  [_] multiline region of <```hex ... ```> for hexdumps (E.G. ./gdb/doc/frames.nou )
    => because not all \x{8,} are hex data => some are big dec nums, some are dates
  [_] THINK: hex string highlight last /000$/ in address => for memory aligned on page size
    NEED: distinguish hi! for hex-address /\x{8,}:/ and hex-data

%% Functions
  2017-06-22 [X] Anything in block /\k+\(/ .. /\)/
  [_] THINK: hi! structs before func in brown E.G: struct.func()
  [_] THINK: include pointers, type conversion:  *(some *)func()
    [_] BUT: distinguish from NOTE:(some text)
    [_] ALT: type conversion colored in yellow
  2017-06-25 [X] TRY: diff/grey color for function arguments
    2017-06-25 [X] Allow nesting of function call syntax: f(a, g())
    [_] FIXME: Allow nesting of brackets f((char*)a)
  [_] TRY: apply rainbow brackets to nested functions


%%%% Extensions %%%% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%% Blocks
  [_] FIXME inherit default color when ``` has zero-indent
  [_] NOTE `{3} actually BAD -- I can't use it with 'ts=2' to align
    * MAYBE:BETTER: single _`_ to align nicely |` text...|
  [_] Create block for simple text and commented text (in addition to ``)
    ~ Placing marker at *^__* before text -- BUT then I can't use 'g<'
    Like ``_ to insert text, ``# -- comment and ``$ -- bash
    ALT: Using *__* or '```' in '# __' or '$ __' to forcibly extend any current syntax till multiline block
      * Try using 'extend transparent skipwhite skipnl skipempty'
    TODO: if there are /`{3}\w/ (like vim flavour) -- do contains=NONE (if no embedded syntax)
  [_] Block -- used even without indent (like ``\`) for long text massives
    (option) Auto-extend block for decisions: until new leading character, lower indent or until closing-repeated decision-marker
  [_] TRY: use 'standout' background for block of monotonous text to distinguish
  [_] BUG:FIXME: `syntax sync ...` not working for '```' regions
    <= open this 'TODO.nou' and jump 'G' to the end of file

% multiline
NEED special way to continue long entries on next line
  -/ C: trailing '\' on current line
  -/ vimscript: leading '\' on next line
  -/ yaml: indented block after special ending ': |'
  ?/ custom:
    another indent but same color -- distinguishes this entry
    no prefixed symbols -- simplify 'y', 'gq', etc
    indent in one tab -- simplify 'g>'

%% Inheritance
  TODO: option to apply inherited hi! (from ?_) to artifacts (path/url)
  THINK: inherit highlight if line is framed in '?...?'
    BUT? then syntax region will become inefficient
  OR: Make additional syntax *?__* or *?/* to override all (contains=NONE)
    ALSO: same additional syntax for outlines -- to override their color despite objects
      ~ seems like second set of outline rules will be necessary
      ? TRY: maybe conceal this prefix marker to keep outline clean ?
    ? maybe conceal inheritance markers *_* *__* entirely, keeping only decision one ?
      ~ seems not possible to conceal -- as markers are part of beg/end
      ! BUT:TRY: group for beg/end can have own syntax contains=nouConcealMarkers
    = Try extending opening marker by detecting *__* -- to unite decision/outline filling
    !!5 HACK: replace *_* and *__* by *.* and *..*
      + more nice looking
      + easier to type
  ALT: replace ' ' instead of appending:  '< reasons' -> '<.reasons' -> '<_reasons'
  ALSO: inherit hi! for shell: $_ -- when you want to emphasize plain commands
    TRY: override only plain text. And use $__ to override all.
  TRY: instead of 2nd/3rd set of decisions make 'contained' syntax starting on *_* or *__*

%% Task/progress
  [_] BUG ru text /[–∞-—è]{1,3}/ treated as /\W+/ => marker placed after it
  THINK if only marker is highlighted and therefore truly visible --> MAYBE:USE: shortened form '_ x' instead of full '[_] [X]'?
  MAYBE: use shorter date spec?
    160716:[X]
    [X=160716]
    [X]/160716
  [_] Highlight: 'X' green, '$' red, '_' blue, '[' ']' white, '<date>' -- italic dark-gray
    ? THINK: how to define region ?
  [_] THINK limit task markers only to beginning of line
    !! Performance
    ? hard to test ?
  2016-09-12 [X] BUG: task symbol "_" affects underlined text
    * Use nesting marginal effects -- create for '[_]' its own syntax group
  [_] TRY: different color for todo:(blueish) / done:(grayish) / cancel:(yellow-orange-brownish)


%%%% API %%%% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  [_] url/path : jump_next/jump_hint/open/show_all_in_unite
  [_] use '[[' and ']]' to jump between headers
  [_] DEV add to nou#bar() ability to prepend line by 'decision'
    * '??' : 2<LocalLeader>?
    * '!4' : 4<LocalLeader>!


%%%% LIMITATIONS %%%% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  [_] BUG:(highlighting combining) can't override color in linked group
    ```vim
      hi! nouArtifactUrl gui=underline
      hi! link nouArtifactUrl Underlined
      exec 'hi SyntasticErrorSign guifg=red ctermfg=red' .
        \' guibg=' . synIDattr(synIDtrans(hlID('SignColumn')), 'bg', 'gui') .
        \' ctermbg=' . synIDattr(synIDtrans(hlID('SignColumn')), 'bg', 'cterm')
    ```
    ALT: patch to vim allowing combining of hi!
      https://groups.google.com/forum/#!topic/vim_dev/5YgghIZH_-w
      ALSO:SEE: /usr/share/nvim/runtime/syntax/html.vim


%%%% IDEAS %%%% ********************************************************

%%% Literal programming
  Unite with ideas from 'latex' or 'haskell' for literal programming
    = interleaving documentation and code

%%% Python back-end
  Write back-end core in python
  Provide interface to manipulate of outline DOM objects by API
    : THINK? base it on XHTML-dom manipulation classes?
  Use vim only as front-end to that API
    Parse //*.nou and keep in sync the in-memory DOM at python
    Convert current export format (.nou) into cursor position in DOM
    Launch specific API by keymaps
    Populate changes from in-memory DOM into export of (.nou)
  > Then I will be able create another front-end api like OpenGL, etc

%%% Graph navigation
  TRY over 'ranger' and 'qutebrowser' -- because python
  By default vim works in terminal with isotropic character metric
    All textobj form aligned tree with distinct leaves
  But what about browsers, based on vim experience?
    It's clusters of text pieces with different font sizes
    They form anisotropic graph, placed on isotropic screen
    Maybe some kind of fast navigation in graph space is also possible?
  –§–∞–π–ª–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –≥—Ä–∞—Ñ–µ
    –∞ —á—Ç–æ –µ—Å–ª–∏ —Å–ª–µ–ø–∏—Ç—å –≤–º–µ—Å—Ç–µ vim, –ø–æ–∏—Å–∫ –ø–æ –≥—Ä–∞—Ñ–∞–º (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤–∏–º–∞) –∏
    —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è –≤ –≤–∏–¥–µ
    –≥—Ä–∞—Ñ–æ–≤?
    –ù–∞–ø—Ä–∏–º–µ—Ä –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é, —Ä–∞–∑–º–µ—Ä–∞–º, –¥–∞—Ç–∞–º –∏—Ç–ø —Å
    –¥–∏–Ω–∞–º–∏—á–Ω—ã–º –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ–º –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ –≤–∏–º–∞. –ù–æ –≤–æ—Ç
    –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∞—Ç—Ä–∏–±—É–¥—ã —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É?...
  MindMap
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É –∏ –ø—Ä–æ–±—Ä–æ—Å —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞
    –Ω–∞ –¥—Ä—É–≥–∏—Ö –≤–µ—Ç–∫–∞—Ö –∏ –¥–∞–∂–µ –∫–∞—Ä—Ç–∞—Ö (–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ). –ù—É–∂–µ–Ω
    –≤—Å–≤—è–∑–∏ —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–¥–µ –Ω–∞ –∫–∞–∫–æ–π –≤–µ—Ç–∫–µ –±—ã–ª–∏
    —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã —Ä–∞–Ω–µ–µ –ø–æ—Ö–æ–∂–∏–µ –∫—É—Å–∫–∏.
    –í–∞–∂–Ω–æ: —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ (–≥–ª–∞–¥–∫–æ—Å—Ç—å) —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ -- –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å
    –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —ç–ø–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ –Ω–µ –∫–æ—Ä–æ–±–∏—Ç—å –≤–∑–≥–ª—è–¥ –∫–∞–∫ –≤–∏–º —Å–≤–æ–∏–º–∏
    —à—Ä–∏—Ñ—Ç–∞–º–∏ –Ω–∞ –≤–∏–Ω–¥–µ.

%%% Dynamic colorschemes
  Switch between colorschemes with focus on different aspects
    standart
    all accented words, default white for any other text

%%% Overcomplicated structures with some info dup
  ? How to manage complexity
  ? What representation is the best to reduce dup
    => all new info must be inserted around similar old info
  ? Way for easy refactoring
    assemble-regroup similar data into strict 'graphems'
      = data normalizing

%%% Interactive data
  Desc + diagrams
    Embed links to files
      [_] NEED: override gf/gF in vim -- and fallback to general 'gf'
      - path from pwd ./
      - relative to current file :/ or .//
      - relative to repo :=/ or ://
      - search in $PATH or in user-list of paths %/
        E.G. %/airy/Makefile -- :lcd to '%' where placed 'airy' first, then open file
    Different prefix and color
      - distinguish from static path hi!
      - bind keymap to this active area
    ? Allow some bash commands to be executable ?
      - another prf :$ ... $:
      - auto-expand :/path to repo root
